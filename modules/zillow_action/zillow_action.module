<?php
/**
 * @file
 * This is the file description for Zillow Action module.
 *
 * In this more verbose, multi-line description, you can specify what this
 * file does exactly. Make sure to wrap your documentation in column 78 so
 * that the file can be displayed nicely in default-sized consoles.
 */

/**
 * Implements hook_action_info().
 */
function zillow_action_action_info() {
  return array(
    'zillow_create_tour_action' => array(
      'type' => 'system',
      'label' => t('Create Tour'),
      'configurable' => TRUE,
      'triggers' => array('any'),
	  'aggregate' => TRUE
    ),
  );
}

function zillow_create_tour_action_form($context) {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => isset($context['title']) ? $context['title'] : '',
    '#required' => TRUE,
    '#description' => t('Please provide a name for your Tour'),
  );
  $form['start'] = array(
    '#type' => 'textfield',
    '#title' => t('Start Address'),
    '#default_value' => isset($context['start']) ? $context['start'] : '',
    '#required' => TRUE,
    '#description' => t('Please provide your starting address. Example: <strong>Portland, OR</strong>'),
  );
  $form['end'] = array(
    '#type' => 'textfield',
    '#title' => t('End Address'),
    '#default_value' => isset($context['end']) ? $context['end'] : '',
    '#required' => TRUE,
    '#description' => t('Please provide your ending address. Example: <strong>Portland, OR</strong>'),
  );
  return $form;
}

function zillow_create_tour_action_submit($form, $form_state) {
  return array(
	'title' => $form_state['values']['title'],
	'start' => $form_state['values']['start'],
	'end'	=> $form_state['values']['end'],
  );
}

/**
 * Action function for action_example_basic_action.
 *
 * This action is not expecting any type of entity object, and can be used with
 * any trigger type or any event.
 *
 * @param $entity
 *   An optional entity object.
 * @param $context
 *   Array with parameters for this action: depends on the trigger.
 *
 * @see action_example_action_info()
 */
function zillow_create_tour_action(&$entity, $context = array()) {
  //
  // In this case we are ignoring the entity and the context. This case of
  // action is useful when your action does not depend on the context, and
  // the function must do something regardless the scope of the trigger.
  // Simply announces that the action was executed using a message.
  $count = 0;
  // create a new tour node
  $node = new stdClass();
  // loop through the rows and setup the reference and geo fields
	foreach($entity as $key) {
	  $node->field_tour_open_ref['und'][]['target_id'] = $key->nid;
	  $node->field_tour_map['und'][$count]['wkt'] = $key->field_prop_geo['und'][0]['wkt'];
	  $node->field_tour_map['und'][$count]['geo_type'] = $key->field_prop_geo['und'][0]['geo_type'];
	  $node->field_tour_map['und'][$count]['lat'] = $key->field_prop_geo['und'][0]['lat'];
	  $node->field_tour_map['und'][$count]['lon'] = $key->field_prop_geo['und'][0]['lon'];
	  $node->field_tour_map['und'][$count]['left'] = $key->field_prop_geo['und'][0]['left'];
	  $node->field_tour_map['und'][$count]['top'] = $key->field_prop_geo['und'][0]['top'];
	  $node->field_tour_map['und'][$count]['right'] = $key->field_prop_geo['und'][0]['right'];
	  $node->field_tour_map['und'][$count]['bottom'] = $key->field_prop_geo['und'][0]['bottom'];
	  $count++;
  }

  // geocode using Google, the Start Address provided by the Realtor

			$starturl = "http://maps.googleapis.com/maps/api/geocode/json?address=".urlencode($context['start'])."&sensor=false";
			
			//dpm($starturl);
			$ch = curl_init($starturl);
	        curl_setopt($ch, CURLOPT_HEADER, 0);
	        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	        $output = curl_exec($ch);      
			curl_close($ch);
	        //dpm($output);
			
			$output = drupal_json_decode($output); //converts JSON to an Array
			
			//put start address in geofield
			$start_lat = $output['results'][0]['geometry']['location']['lat'];
			$start_lng = $output['results'][0]['geometry']['location']['lng'];
			if (isset($start_lat) && isset($start_lng)) {
		   	 $node->field_tour_start_address['und'][0]['wkt'] = "POINT ($start_lng $start_lat)";
		   	 $node->field_tour_start_address['und'][0]['geo_type'] = "POINT";
		   	 $node->field_tour_start_address['und'][0]['lat'] = $start_lat;
		   	 $node->field_tour_start_address['und'][0]['lon'] = $start_lng;
		   	 $node->field_tour_start_address['und'][0]['left'] = $start_lng;
		   	 $node->field_tour_start_address['und'][0]['top'] = $start_lat;
		   	 $node->field_tour_start_address['und'][0]['right'] = $start_lng;
		   	 $node->field_tour_start_address['und'][0]['bottom'] = $start_lat;
		   	 //dpm($output);
	  		}
		    //	geocode using Google, the Start Address provided by the Realtor
			$endurl = "http://maps.googleapis.com/maps/api/geocode/json?address=".urlencode($context['end'])."&sensor=false";
			//dpm($endurl);
			$ch2 = curl_init($endurl);
	        curl_setopt($ch2, CURLOPT_HEADER, 0);
	        curl_setopt($ch2, CURLOPT_RETURNTRANSFER, 1);
	        $output2 = curl_exec($ch2);      
			curl_close($ch2);
	        //dpm($output);
			
			$output2 = drupal_json_decode($output2); //converts JSON to an Array
			//put end address in geofield
			$end_lat = $output2['results'][0]['geometry']['location']['lat'];
			$end_lng = $output2['results'][0]['geometry']['location']['lng'];
			if (isset($end_lat) && isset($end_lng)) {
		   	 $node->field_tour_end_address['und'][0]['wkt'] = "POINT ($end_lng $end_lat)";
		   	 $node->field_tour_end_address['und'][0]['geo_type'] = "POINT";
		   	 $node->field_tour_end_address['und'][0]['lat'] = $end_lat;
		   	 $node->field_tour_end_address['und'][0]['lon'] = $end_lng;
		   	 $node->field_tour_end_address['und'][0]['left'] = $end_lng;
		   	 $node->field_tour_end_address['und'][0]['top'] = $end_lat;
		   	 $node->field_tour_end_address['und'][0]['right'] = $end_lng;
		   	 $node->field_tour_end_address['und'][0]['bottom'] = $end_lat;
		   	 //dpm($output);
			}

		

  //set the entity type
  if (empty($context['node'])) {
    $context['node'] = $entity;
  }
  //filter the user input for xss
  $context['title'] = token_replace(filter_xss_admin($context['title']), $context);
  $context['start'] = token_replace(filter_xss_admin($context['start']), $context);
  $context['end'] 	= token_replace(filter_xss_admin($context['end']), $context);
  //setup the node with the rest of the data values
  $node->field_tour_start_text['und'][0]['value'] 	= $context['start'];
  $node->field_tour_end_text['und'][0]['value'] 	= $context['end'];
  $node->nid            							= NULL;
  $node->title          							= $context['title'];
  $node->type           							= 'tour';
  $node->language       							= LANGUAGE_NONE;
  $node->created        							= time();
  $node->changed        							= $node->created;
  $node->status         							= 1;         // Published?
  $node->promote        							= 0;         // Display on front page?
  $node->sticky        								= 0;         // Display top of page?
  $node->format         							= 0;         // Filtered HTML?
  $node->revision       							= 1;
  // Save new node
  node_object_prepare($node);
  //echo "node prepare";
  node_submit($node);
  node_save($node);
  //dpm($node);


  drupal_goto("node/" . $node->nid);

}



